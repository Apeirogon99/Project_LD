#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IdentityPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IdentityPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IdentityPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IdentityPacket_2eproto;
namespace Protocol {
class C2S_CreateCharacter;
struct C2S_CreateCharacterDefaultTypeInternal;
extern C2S_CreateCharacterDefaultTypeInternal _C2S_CreateCharacter_default_instance_;
class C2S_EmailVerified;
struct C2S_EmailVerifiedDefaultTypeInternal;
extern C2S_EmailVerifiedDefaultTypeInternal _C2S_EmailVerified_default_instance_;
class C2S_EnterServer;
struct C2S_EnterServerDefaultTypeInternal;
extern C2S_EnterServerDefaultTypeInternal _C2S_EnterServer_default_instance_;
class C2S_LeaveServer;
struct C2S_LeaveServerDefaultTypeInternal;
extern C2S_LeaveServerDefaultTypeInternal _C2S_LeaveServer_default_instance_;
class C2S_LoadCharacters;
struct C2S_LoadCharactersDefaultTypeInternal;
extern C2S_LoadCharactersDefaultTypeInternal _C2S_LoadCharacters_default_instance_;
class C2S_LoadServer;
struct C2S_LoadServerDefaultTypeInternal;
extern C2S_LoadServerDefaultTypeInternal _C2S_LoadServer_default_instance_;
class C2S_SelectServer;
struct C2S_SelectServerDefaultTypeInternal;
extern C2S_SelectServerDefaultTypeInternal _C2S_SelectServer_default_instance_;
class C2S_Singin;
struct C2S_SinginDefaultTypeInternal;
extern C2S_SinginDefaultTypeInternal _C2S_Singin_default_instance_;
class C2S_Singup;
struct C2S_SingupDefaultTypeInternal;
extern C2S_SingupDefaultTypeInternal _C2S_Singup_default_instance_;
class C2S_TravelServer;
struct C2S_TravelServerDefaultTypeInternal;
extern C2S_TravelServerDefaultTypeInternal _C2S_TravelServer_default_instance_;
class S2C_CreateCharacter;
struct S2C_CreateCharacterDefaultTypeInternal;
extern S2C_CreateCharacterDefaultTypeInternal _S2C_CreateCharacter_default_instance_;
class S2C_EmailVerified;
struct S2C_EmailVerifiedDefaultTypeInternal;
extern S2C_EmailVerifiedDefaultTypeInternal _S2C_EmailVerified_default_instance_;
class S2C_EnterServer;
struct S2C_EnterServerDefaultTypeInternal;
extern S2C_EnterServerDefaultTypeInternal _S2C_EnterServer_default_instance_;
class S2C_LeaveServer;
struct S2C_LeaveServerDefaultTypeInternal;
extern S2C_LeaveServerDefaultTypeInternal _S2C_LeaveServer_default_instance_;
class S2C_LoadCharacters;
struct S2C_LoadCharactersDefaultTypeInternal;
extern S2C_LoadCharactersDefaultTypeInternal _S2C_LoadCharacters_default_instance_;
class S2C_LoadServer;
struct S2C_LoadServerDefaultTypeInternal;
extern S2C_LoadServerDefaultTypeInternal _S2C_LoadServer_default_instance_;
class S2C_SelectServer;
struct S2C_SelectServerDefaultTypeInternal;
extern S2C_SelectServerDefaultTypeInternal _S2C_SelectServer_default_instance_;
class S2C_Singin;
struct S2C_SinginDefaultTypeInternal;
extern S2C_SinginDefaultTypeInternal _S2C_Singin_default_instance_;
class S2C_Singup;
struct S2C_SingupDefaultTypeInternal;
extern S2C_SingupDefaultTypeInternal _S2C_Singup_default_instance_;
class S2C_TravelServer;
struct S2C_TravelServerDefaultTypeInternal;
extern S2C_TravelServerDefaultTypeInternal _S2C_TravelServer_default_instance_;
class SCharacterData;
struct SCharacterDataDefaultTypeInternal;
extern SCharacterDataDefaultTypeInternal _SCharacterData_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_CreateCharacter>(Arena*);
template<> ::Protocol::C2S_EmailVerified* Arena::CreateMaybeMessage<::Protocol::C2S_EmailVerified>(Arena*);
template<> ::Protocol::C2S_EnterServer* Arena::CreateMaybeMessage<::Protocol::C2S_EnterServer>(Arena*);
template<> ::Protocol::C2S_LeaveServer* Arena::CreateMaybeMessage<::Protocol::C2S_LeaveServer>(Arena*);
template<> ::Protocol::C2S_LoadCharacters* Arena::CreateMaybeMessage<::Protocol::C2S_LoadCharacters>(Arena*);
template<> ::Protocol::C2S_LoadServer* Arena::CreateMaybeMessage<::Protocol::C2S_LoadServer>(Arena*);
template<> ::Protocol::C2S_SelectServer* Arena::CreateMaybeMessage<::Protocol::C2S_SelectServer>(Arena*);
template<> ::Protocol::C2S_Singin* Arena::CreateMaybeMessage<::Protocol::C2S_Singin>(Arena*);
template<> ::Protocol::C2S_Singup* Arena::CreateMaybeMessage<::Protocol::C2S_Singup>(Arena*);
template<> ::Protocol::C2S_TravelServer* Arena::CreateMaybeMessage<::Protocol::C2S_TravelServer>(Arena*);
template<> ::Protocol::S2C_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_CreateCharacter>(Arena*);
template<> ::Protocol::S2C_EmailVerified* Arena::CreateMaybeMessage<::Protocol::S2C_EmailVerified>(Arena*);
template<> ::Protocol::S2C_EnterServer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterServer>(Arena*);
template<> ::Protocol::S2C_LeaveServer* Arena::CreateMaybeMessage<::Protocol::S2C_LeaveServer>(Arena*);
template<> ::Protocol::S2C_LoadCharacters* Arena::CreateMaybeMessage<::Protocol::S2C_LoadCharacters>(Arena*);
template<> ::Protocol::S2C_LoadServer* Arena::CreateMaybeMessage<::Protocol::S2C_LoadServer>(Arena*);
template<> ::Protocol::S2C_SelectServer* Arena::CreateMaybeMessage<::Protocol::S2C_SelectServer>(Arena*);
template<> ::Protocol::S2C_Singin* Arena::CreateMaybeMessage<::Protocol::S2C_Singin>(Arena*);
template<> ::Protocol::S2C_Singup* Arena::CreateMaybeMessage<::Protocol::S2C_Singup>(Arena*);
template<> ::Protocol::S2C_TravelServer* Arena::CreateMaybeMessage<::Protocol::S2C_TravelServer>(Arena*);
template<> ::Protocol::SCharacterData* Arena::CreateMaybeMessage<::Protocol::SCharacterData>(Arena*);
template<> ::Protocol::UserData* Arena::CreateMaybeMessage<::Protocol::UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit PROTOBUF_CONSTEXPR UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserData& from) {
    UserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 5,
    kUpdateDateFieldNumber = 7,
    kCreateDateFieldNumber = 8,
    kActivateFieldNumber = 3,
    kConfirmedFieldNumber = 4,
    kVerifiedFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string update_date = 7;
  void clear_update_date();
  const std::string& update_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_date();
  PROTOBUF_NODISCARD std::string* release_update_date();
  void set_allocated_update_date(std::string* update_date);
  private:
  const std::string& _internal_update_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_date(const std::string& value);
  std::string* _internal_mutable_update_date();
  public:

  // string create_date = 8;
  void clear_create_date();
  const std::string& create_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_date();
  PROTOBUF_NODISCARD std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);
  private:
  const std::string& _internal_create_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_date(const std::string& value);
  std::string* _internal_mutable_create_date();
  public:

  // bool activate = 3;
  void clear_activate();
  bool activate() const;
  void set_activate(bool value);
  private:
  bool _internal_activate() const;
  void _internal_set_activate(bool value);
  public:

  // bool confirmed = 4;
  void clear_confirmed();
  bool confirmed() const;
  void set_confirmed(bool value);
  private:
  bool _internal_confirmed() const;
  void _internal_set_confirmed(bool value);
  public:

  // bool verified = 6;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
    bool activate_;
    bool confirmed_;
    bool verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class SCharacterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SCharacterData) */ {
 public:
  inline SCharacterData() : SCharacterData(nullptr) {}
  ~SCharacterData() override;
  explicit PROTOBUF_CONSTEXPR SCharacterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCharacterData(const SCharacterData& from);
  SCharacterData(SCharacterData&& from) noexcept
    : SCharacterData() {
    *this = ::std::move(from);
  }

  inline SCharacterData& operator=(const SCharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCharacterData& operator=(SCharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCharacterData* internal_default_instance() {
    return reinterpret_cast<const SCharacterData*>(
               &_SCharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCharacterData& a, SCharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(SCharacterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCharacterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCharacterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCharacterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCharacterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SCharacterData& from) {
    SCharacterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCharacterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SCharacterData";
  }
  protected:
  explicit SCharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLevelFieldNumber = 2,
    kJobFieldNumber = 3,
    kTribeFieldNumber = 4,
    kPositionFieldNumber = 5,
    kSkinFieldNumber = 6,
    kHairFieldNumber = 7,
    kEyeFieldNumber = 8,
    kEyebrowFieldNumber = 9,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 job = 3;
  void clear_job();
  int32_t job() const;
  void set_job(int32_t value);
  private:
  int32_t _internal_job() const;
  void _internal_set_job(int32_t value);
  public:

  // int32 tribe = 4;
  void clear_tribe();
  int32_t tribe() const;
  void set_tribe(int32_t value);
  private:
  int32_t _internal_tribe() const;
  void _internal_set_tribe(int32_t value);
  public:

  // int32 position = 5;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // uint32 skin = 6;
  void clear_skin();
  uint32_t skin() const;
  void set_skin(uint32_t value);
  private:
  uint32_t _internal_skin() const;
  void _internal_set_skin(uint32_t value);
  public:

  // uint32 hair = 7;
  void clear_hair();
  uint32_t hair() const;
  void set_hair(uint32_t value);
  private:
  uint32_t _internal_hair() const;
  void _internal_set_hair(uint32_t value);
  public:

  // uint32 eye = 8;
  void clear_eye();
  uint32_t eye() const;
  void set_eye(uint32_t value);
  private:
  uint32_t _internal_eye() const;
  void _internal_set_eye(uint32_t value);
  public:

  // uint32 eyebrow = 9;
  void clear_eyebrow();
  uint32_t eyebrow() const;
  void set_eyebrow(uint32_t value);
  private:
  uint32_t _internal_eyebrow() const;
  void _internal_set_eyebrow(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SCharacterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t level_;
    int32_t job_;
    int32_t tribe_;
    int32_t position_;
    uint32_t skin_;
    uint32_t hair_;
    uint32_t eye_;
    uint32_t eyebrow_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_EnterServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EnterServer) */ {
 public:
  inline C2S_EnterServer() : C2S_EnterServer(nullptr) {}
  ~C2S_EnterServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_EnterServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EnterServer(const C2S_EnterServer& from);
  C2S_EnterServer(C2S_EnterServer&& from) noexcept
    : C2S_EnterServer() {
    *this = ::std::move(from);
  }

  inline C2S_EnterServer& operator=(const C2S_EnterServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EnterServer& operator=(C2S_EnterServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EnterServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EnterServer* internal_default_instance() {
    return reinterpret_cast<const C2S_EnterServer*>(
               &_C2S_EnterServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_EnterServer& a, C2S_EnterServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EnterServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EnterServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EnterServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EnterServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EnterServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EnterServer& from) {
    C2S_EnterServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EnterServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EnterServer";
  }
  protected:
  explicit C2S_EnterServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EnterServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterServer) */ {
 public:
  inline S2C_EnterServer() : S2C_EnterServer(nullptr) {}
  ~S2C_EnterServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterServer(const S2C_EnterServer& from);
  S2C_EnterServer(S2C_EnterServer&& from) noexcept
    : S2C_EnterServer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterServer& operator=(const S2C_EnterServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterServer& operator=(S2C_EnterServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterServer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterServer*>(
               &_S2C_EnterServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_EnterServer& a, S2C_EnterServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterServer& from) {
    S2C_EnterServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterServer";
  }
  protected:
  explicit S2C_EnterServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LeaveServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LeaveServer) */ {
 public:
  inline C2S_LeaveServer() : C2S_LeaveServer(nullptr) {}
  ~C2S_LeaveServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_LeaveServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LeaveServer(const C2S_LeaveServer& from);
  C2S_LeaveServer(C2S_LeaveServer&& from) noexcept
    : C2S_LeaveServer() {
    *this = ::std::move(from);
  }

  inline C2S_LeaveServer& operator=(const C2S_LeaveServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LeaveServer& operator=(C2S_LeaveServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LeaveServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LeaveServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LeaveServer*>(
               &_C2S_LeaveServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_LeaveServer& a, C2S_LeaveServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LeaveServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LeaveServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LeaveServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LeaveServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LeaveServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LeaveServer& from) {
    C2S_LeaveServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LeaveServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LeaveServer";
  }
  protected:
  explicit C2S_LeaveServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LeaveServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeaveServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeaveServer) */ {
 public:
  inline S2C_LeaveServer() : S2C_LeaveServer(nullptr) {}
  ~S2C_LeaveServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LeaveServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeaveServer(const S2C_LeaveServer& from);
  S2C_LeaveServer(S2C_LeaveServer&& from) noexcept
    : S2C_LeaveServer() {
    *this = ::std::move(from);
  }

  inline S2C_LeaveServer& operator=(const S2C_LeaveServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeaveServer& operator=(S2C_LeaveServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeaveServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeaveServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeaveServer*>(
               &_S2C_LeaveServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_LeaveServer& a, S2C_LeaveServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeaveServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeaveServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeaveServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeaveServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LeaveServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LeaveServer& from) {
    S2C_LeaveServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LeaveServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeaveServer";
  }
  protected:
  explicit S2C_LeaveServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeaveServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singin) */ {
 public:
  inline C2S_Singin() : C2S_Singin(nullptr) {}
  ~C2S_Singin() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singin(const C2S_Singin& from);
  C2S_Singin(C2S_Singin&& from) noexcept
    : C2S_Singin() {
    *this = ::std::move(from);
  }

  inline C2S_Singin& operator=(const C2S_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singin& operator=(C2S_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singin* internal_default_instance() {
    return reinterpret_cast<const C2S_Singin*>(
               &_C2S_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2S_Singin& a, C2S_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singin& from) {
    C2S_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singin";
  }
  protected:
  explicit C2S_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singin) */ {
 public:
  inline S2C_Singin() : S2C_Singin(nullptr) {}
  ~S2C_Singin() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singin(const S2C_Singin& from);
  S2C_Singin(S2C_Singin&& from) noexcept
    : S2C_Singin() {
    *this = ::std::move(from);
  }

  inline S2C_Singin& operator=(const S2C_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singin& operator=(S2C_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singin* internal_default_instance() {
    return reinterpret_cast<const S2C_Singin*>(
               &_S2C_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_Singin& a, S2C_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singin& from) {
    S2C_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singin";
  }
  protected:
  explicit S2C_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string ticket = 2;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singup) */ {
 public:
  inline C2S_Singup() : C2S_Singup(nullptr) {}
  ~C2S_Singup() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singup(const C2S_Singup& from);
  C2S_Singup(C2S_Singup&& from) noexcept
    : C2S_Singup() {
    *this = ::std::move(from);
  }

  inline C2S_Singup& operator=(const C2S_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singup& operator=(C2S_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singup* internal_default_instance() {
    return reinterpret_cast<const C2S_Singup*>(
               &_C2S_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_Singup& a, C2S_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singup& from) {
    C2S_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singup";
  }
  protected:
  explicit C2S_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singup) */ {
 public:
  inline S2C_Singup() : S2C_Singup(nullptr) {}
  ~S2C_Singup() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singup(const S2C_Singup& from);
  S2C_Singup(S2C_Singup&& from) noexcept
    : S2C_Singup() {
    *this = ::std::move(from);
  }

  inline S2C_Singup& operator=(const S2C_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singup& operator=(S2C_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singup* internal_default_instance() {
    return reinterpret_cast<const S2C_Singup*>(
               &_S2C_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_Singup& a, S2C_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singup& from) {
    S2C_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singup";
  }
  protected:
  explicit S2C_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EmailVerified) */ {
 public:
  inline C2S_EmailVerified() : C2S_EmailVerified(nullptr) {}
  ~C2S_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EmailVerified(const C2S_EmailVerified& from);
  C2S_EmailVerified(C2S_EmailVerified&& from) noexcept
    : C2S_EmailVerified() {
    *this = ::std::move(from);
  }

  inline C2S_EmailVerified& operator=(const C2S_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EmailVerified& operator=(C2S_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const C2S_EmailVerified*>(
               &_C2S_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2S_EmailVerified& a, C2S_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EmailVerified& from) {
    C2S_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EmailVerified";
  }
  protected:
  explicit C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifiedFieldNumber = 1,
  };
  // string verified = 1;
  void clear_verified();
  const std::string& verified() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verified(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verified();
  PROTOBUF_NODISCARD std::string* release_verified();
  void set_allocated_verified(std::string* verified);
  private:
  const std::string& _internal_verified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verified(const std::string& value);
  std::string* _internal_mutable_verified();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EmailVerified) */ {
 public:
  inline S2C_EmailVerified() : S2C_EmailVerified(nullptr) {}
  ~S2C_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EmailVerified(const S2C_EmailVerified& from);
  S2C_EmailVerified(S2C_EmailVerified&& from) noexcept
    : S2C_EmailVerified() {
    *this = ::std::move(from);
  }

  inline S2C_EmailVerified& operator=(const S2C_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EmailVerified& operator=(S2C_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const S2C_EmailVerified*>(
               &_S2C_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S2C_EmailVerified& a, S2C_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EmailVerified& from) {
    S2C_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EmailVerified";
  }
  protected:
  explicit S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadServer) */ {
 public:
  inline C2S_LoadServer() : C2S_LoadServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LoadServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadServer(const C2S_LoadServer& from);
  C2S_LoadServer(C2S_LoadServer&& from) noexcept
    : C2S_LoadServer() {
    *this = ::std::move(from);
  }

  inline C2S_LoadServer& operator=(const C2S_LoadServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadServer& operator=(C2S_LoadServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadServer*>(
               &_C2S_LoadServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C2S_LoadServer& a, C2S_LoadServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LoadServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LoadServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadServer";
  }
  protected:
  explicit C2S_LoadServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadServer) */ {
 public:
  inline S2C_LoadServer() : S2C_LoadServer(nullptr) {}
  ~S2C_LoadServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadServer(const S2C_LoadServer& from);
  S2C_LoadServer(S2C_LoadServer&& from) noexcept
    : S2C_LoadServer() {
    *this = ::std::move(from);
  }

  inline S2C_LoadServer& operator=(const S2C_LoadServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadServer& operator=(S2C_LoadServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadServer*>(
               &_S2C_LoadServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S2C_LoadServer& a, S2C_LoadServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadServer& from) {
    S2C_LoadServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadServer";
  }
  protected:
  explicit S2C_LoadServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // repeated int32 port = 1;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  private:
  int32_t _internal_port(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_port() const;
  void _internal_add_port(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_port();
  public:
  int32_t port(int index) const;
  void set_port(int index, int32_t value);
  void add_port(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      port() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_port();

  // repeated string ip = 2;
  int ip_size() const;
  private:
  int _internal_ip_size() const;
  public:
  void clear_ip();
  const std::string& ip(int index) const;
  std::string* mutable_ip(int index);
  void set_ip(int index, const std::string& value);
  void set_ip(int index, std::string&& value);
  void set_ip(int index, const char* value);
  void set_ip(int index, const char* value, size_t size);
  std::string* add_ip();
  void add_ip(const std::string& value);
  void add_ip(std::string&& value);
  void add_ip(const char* value);
  void add_ip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip();
  private:
  const std::string& _internal_ip(int index) const;
  std::string* _internal_add_ip();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > port_;
    mutable std::atomic<int> _port_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadCharacters final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadCharacters) */ {
 public:
  inline C2S_LoadCharacters() : C2S_LoadCharacters(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LoadCharacters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadCharacters(const C2S_LoadCharacters& from);
  C2S_LoadCharacters(C2S_LoadCharacters&& from) noexcept
    : C2S_LoadCharacters() {
    *this = ::std::move(from);
  }

  inline C2S_LoadCharacters& operator=(const C2S_LoadCharacters& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadCharacters& operator=(C2S_LoadCharacters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadCharacters& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadCharacters* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadCharacters*>(
               &_C2S_LoadCharacters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C2S_LoadCharacters& a, C2S_LoadCharacters& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadCharacters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadCharacters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadCharacters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadCharacters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LoadCharacters& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LoadCharacters& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadCharacters";
  }
  protected:
  explicit C2S_LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadCharacters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadCharacters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadCharacters) */ {
 public:
  inline S2C_LoadCharacters() : S2C_LoadCharacters(nullptr) {}
  ~S2C_LoadCharacters() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadCharacters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadCharacters(const S2C_LoadCharacters& from);
  S2C_LoadCharacters(S2C_LoadCharacters&& from) noexcept
    : S2C_LoadCharacters() {
    *this = ::std::move(from);
  }

  inline S2C_LoadCharacters& operator=(const S2C_LoadCharacters& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadCharacters& operator=(S2C_LoadCharacters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadCharacters& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadCharacters* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadCharacters*>(
               &_S2C_LoadCharacters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S2C_LoadCharacters& a, S2C_LoadCharacters& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadCharacters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadCharacters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadCharacters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadCharacters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadCharacters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadCharacters& from) {
    S2C_LoadCharacters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadCharacters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadCharacters";
  }
  protected:
  explicit S2C_LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // repeated .Protocol.SCharacterData character = 1;
  int character_size() const;
  private:
  int _internal_character_size() const;
  public:
  void clear_character();
  ::Protocol::SCharacterData* mutable_character(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >*
      mutable_character();
  private:
  const ::Protocol::SCharacterData& _internal_character(int index) const;
  ::Protocol::SCharacterData* _internal_add_character();
  public:
  const ::Protocol::SCharacterData& character(int index) const;
  ::Protocol::SCharacterData* add_character();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >&
      character() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadCharacters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData > character_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_SelectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_SelectServer) */ {
 public:
  inline C2S_SelectServer() : C2S_SelectServer(nullptr) {}
  ~C2S_SelectServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_SelectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_SelectServer(const C2S_SelectServer& from);
  C2S_SelectServer(C2S_SelectServer&& from) noexcept
    : C2S_SelectServer() {
    *this = ::std::move(from);
  }

  inline C2S_SelectServer& operator=(const C2S_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_SelectServer& operator=(C2S_SelectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_SelectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_SelectServer* internal_default_instance() {
    return reinterpret_cast<const C2S_SelectServer*>(
               &_C2S_SelectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C2S_SelectServer& a, C2S_SelectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_SelectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_SelectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_SelectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_SelectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_SelectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_SelectServer& from) {
    C2S_SelectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_SelectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_SelectServer";
  }
  protected:
  explicit C2S_SelectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNumFieldNumber = 1,
  };
  // int32 server_num = 1;
  void clear_server_num();
  int32_t server_num() const;
  void set_server_num(int32_t value);
  private:
  int32_t _internal_server_num() const;
  void _internal_set_server_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_SelectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_SelectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_SelectServer) */ {
 public:
  inline S2C_SelectServer() : S2C_SelectServer(nullptr) {}
  ~S2C_SelectServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_SelectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SelectServer(const S2C_SelectServer& from);
  S2C_SelectServer(S2C_SelectServer&& from) noexcept
    : S2C_SelectServer() {
    *this = ::std::move(from);
  }

  inline S2C_SelectServer& operator=(const S2C_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SelectServer& operator=(S2C_SelectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SelectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SelectServer* internal_default_instance() {
    return reinterpret_cast<const S2C_SelectServer*>(
               &_S2C_SelectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2C_SelectServer& a, S2C_SelectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SelectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SelectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SelectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SelectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_SelectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_SelectServer& from) {
    S2C_SelectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_SelectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SelectServer";
  }
  protected:
  explicit S2C_SelectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SelectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CreateCharacter) */ {
 public:
  inline C2S_CreateCharacter() : C2S_CreateCharacter(nullptr) {}
  ~C2S_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CreateCharacter(const C2S_CreateCharacter& from);
  C2S_CreateCharacter(C2S_CreateCharacter&& from) noexcept
    : C2S_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_CreateCharacter& operator=(const C2S_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CreateCharacter& operator=(C2S_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_CreateCharacter*>(
               &_C2S_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C2S_CreateCharacter& a, C2S_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_CreateCharacter& from) {
    C2S_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CreateCharacter";
  }
  protected:
  explicit C2S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // .Protocol.SCharacterData character = 1;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::Protocol::SCharacterData& character() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character();
  ::Protocol::SCharacterData* mutable_character();
  void set_allocated_character(::Protocol::SCharacterData* character);
  private:
  const ::Protocol::SCharacterData& _internal_character() const;
  ::Protocol::SCharacterData* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::Protocol::SCharacterData* character);
  ::Protocol::SCharacterData* unsafe_arena_release_character();

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SCharacterData* character_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CreateCharacter) */ {
 public:
  inline S2C_CreateCharacter() : S2C_CreateCharacter(nullptr) {}
  ~S2C_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CreateCharacter(const S2C_CreateCharacter& from);
  S2C_CreateCharacter(S2C_CreateCharacter&& from) noexcept
    : S2C_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_CreateCharacter& operator=(const S2C_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CreateCharacter& operator=(S2C_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_CreateCharacter*>(
               &_S2C_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S2C_CreateCharacter& a, S2C_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_CreateCharacter& from) {
    S2C_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CreateCharacter";
  }
  protected:
  explicit S2C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_TravelServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_TravelServer) */ {
 public:
  inline C2S_TravelServer() : C2S_TravelServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_TravelServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_TravelServer(const C2S_TravelServer& from);
  C2S_TravelServer(C2S_TravelServer&& from) noexcept
    : C2S_TravelServer() {
    *this = ::std::move(from);
  }

  inline C2S_TravelServer& operator=(const C2S_TravelServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_TravelServer& operator=(C2S_TravelServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_TravelServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_TravelServer* internal_default_instance() {
    return reinterpret_cast<const C2S_TravelServer*>(
               &_C2S_TravelServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C2S_TravelServer& a, C2S_TravelServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_TravelServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_TravelServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_TravelServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_TravelServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_TravelServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_TravelServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_TravelServer";
  }
  protected:
  explicit C2S_TravelServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_TravelServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_TravelServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_TravelServer) */ {
 public:
  inline S2C_TravelServer() : S2C_TravelServer(nullptr) {}
  ~S2C_TravelServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_TravelServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_TravelServer(const S2C_TravelServer& from);
  S2C_TravelServer(S2C_TravelServer&& from) noexcept
    : S2C_TravelServer() {
    *this = ::std::move(from);
  }

  inline S2C_TravelServer& operator=(const S2C_TravelServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_TravelServer& operator=(S2C_TravelServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_TravelServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_TravelServer* internal_default_instance() {
    return reinterpret_cast<const S2C_TravelServer*>(
               &_S2C_TravelServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S2C_TravelServer& a, S2C_TravelServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_TravelServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_TravelServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_TravelServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_TravelServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_TravelServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_TravelServer& from) {
    S2C_TravelServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_TravelServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_TravelServer";
  }
  protected:
  explicit S2C_TravelServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_TravelServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserData

// string id = 1;
inline void UserData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.id)
}
inline std::string* UserData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.id)
  return _s;
}
inline const std::string& UserData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UserData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.id)
  return _impl_.id_.Release();
}
inline void UserData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.id)
}

// string password = 2;
inline void UserData::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserData::password() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.password)
}
inline std::string* UserData::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.password)
  return _s;
}
inline const std::string& UserData::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserData::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.password)
  return _impl_.password_.Release();
}
inline void UserData::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.password)
}

// bool activate = 3;
inline void UserData::clear_activate() {
  _impl_.activate_ = false;
}
inline bool UserData::_internal_activate() const {
  return _impl_.activate_;
}
inline bool UserData::activate() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.activate)
  return _internal_activate();
}
inline void UserData::_internal_set_activate(bool value) {
  
  _impl_.activate_ = value;
}
inline void UserData::set_activate(bool value) {
  _internal_set_activate(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.activate)
}

// bool confirmed = 4;
inline void UserData::clear_confirmed() {
  _impl_.confirmed_ = false;
}
inline bool UserData::_internal_confirmed() const {
  return _impl_.confirmed_;
}
inline bool UserData::confirmed() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.confirmed)
  return _internal_confirmed();
}
inline void UserData::_internal_set_confirmed(bool value) {
  
  _impl_.confirmed_ = value;
}
inline void UserData::set_confirmed(bool value) {
  _internal_set_confirmed(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.confirmed)
}

// string email = 5;
inline void UserData::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserData::email() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.email)
}
inline std::string* UserData::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.email)
  return _s;
}
inline const std::string& UserData::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserData::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.email)
  return _impl_.email_.Release();
}
inline void UserData::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.email)
}

// bool verified = 6;
inline void UserData::clear_verified() {
  _impl_.verified_ = false;
}
inline bool UserData::_internal_verified() const {
  return _impl_.verified_;
}
inline bool UserData::verified() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.verified)
  return _internal_verified();
}
inline void UserData::_internal_set_verified(bool value) {
  
  _impl_.verified_ = value;
}
inline void UserData::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.verified)
}

// string update_date = 7;
inline void UserData::clear_update_date() {
  _impl_.update_date_.ClearToEmpty();
}
inline const std::string& UserData::update_date() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.update_date)
  return _internal_update_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_update_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.update_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.update_date)
}
inline std::string* UserData::mutable_update_date() {
  std::string* _s = _internal_mutable_update_date();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.update_date)
  return _s;
}
inline const std::string& UserData::_internal_update_date() const {
  return _impl_.update_date_.Get();
}
inline void UserData::_internal_set_update_date(const std::string& value) {
  
  _impl_.update_date_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_update_date() {
  
  return _impl_.update_date_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_update_date() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.update_date)
  return _impl_.update_date_.Release();
}
inline void UserData::set_allocated_update_date(std::string* update_date) {
  if (update_date != nullptr) {
    
  } else {
    
  }
  _impl_.update_date_.SetAllocated(update_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_date_.IsDefault()) {
    _impl_.update_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.update_date)
}

// string create_date = 8;
inline void UserData::clear_create_date() {
  _impl_.create_date_.ClearToEmpty();
}
inline const std::string& UserData::create_date() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.create_date)
  return _internal_create_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_create_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.create_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.create_date)
}
inline std::string* UserData::mutable_create_date() {
  std::string* _s = _internal_mutable_create_date();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.create_date)
  return _s;
}
inline const std::string& UserData::_internal_create_date() const {
  return _impl_.create_date_.Get();
}
inline void UserData::_internal_set_create_date(const std::string& value) {
  
  _impl_.create_date_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_create_date() {
  
  return _impl_.create_date_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_create_date() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.create_date)
  return _impl_.create_date_.Release();
}
inline void UserData::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  _impl_.create_date_.SetAllocated(create_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.create_date_.IsDefault()) {
    _impl_.create_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.create_date)
}

// -------------------------------------------------------------------

// SCharacterData

// bytes name = 1;
inline void SCharacterData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SCharacterData::name() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SCharacterData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.name)
}
inline std::string* SCharacterData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.SCharacterData.name)
  return _s;
}
inline const std::string& SCharacterData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SCharacterData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SCharacterData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SCharacterData::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.SCharacterData.name)
  return _impl_.name_.Release();
}
inline void SCharacterData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SCharacterData.name)
}

// int32 level = 2;
inline void SCharacterData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SCharacterData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SCharacterData::level() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.level)
  return _internal_level();
}
inline void SCharacterData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SCharacterData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.level)
}

// int32 job = 3;
inline void SCharacterData::clear_job() {
  _impl_.job_ = 0;
}
inline int32_t SCharacterData::_internal_job() const {
  return _impl_.job_;
}
inline int32_t SCharacterData::job() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.job)
  return _internal_job();
}
inline void SCharacterData::_internal_set_job(int32_t value) {
  
  _impl_.job_ = value;
}
inline void SCharacterData::set_job(int32_t value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.job)
}

// int32 tribe = 4;
inline void SCharacterData::clear_tribe() {
  _impl_.tribe_ = 0;
}
inline int32_t SCharacterData::_internal_tribe() const {
  return _impl_.tribe_;
}
inline int32_t SCharacterData::tribe() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.tribe)
  return _internal_tribe();
}
inline void SCharacterData::_internal_set_tribe(int32_t value) {
  
  _impl_.tribe_ = value;
}
inline void SCharacterData::set_tribe(int32_t value) {
  _internal_set_tribe(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.tribe)
}

// int32 position = 5;
inline void SCharacterData::clear_position() {
  _impl_.position_ = 0;
}
inline int32_t SCharacterData::_internal_position() const {
  return _impl_.position_;
}
inline int32_t SCharacterData::position() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.position)
  return _internal_position();
}
inline void SCharacterData::_internal_set_position(int32_t value) {
  
  _impl_.position_ = value;
}
inline void SCharacterData::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.position)
}

// uint32 skin = 6;
inline void SCharacterData::clear_skin() {
  _impl_.skin_ = 0u;
}
inline uint32_t SCharacterData::_internal_skin() const {
  return _impl_.skin_;
}
inline uint32_t SCharacterData::skin() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.skin)
  return _internal_skin();
}
inline void SCharacterData::_internal_set_skin(uint32_t value) {
  
  _impl_.skin_ = value;
}
inline void SCharacterData::set_skin(uint32_t value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.skin)
}

// uint32 hair = 7;
inline void SCharacterData::clear_hair() {
  _impl_.hair_ = 0u;
}
inline uint32_t SCharacterData::_internal_hair() const {
  return _impl_.hair_;
}
inline uint32_t SCharacterData::hair() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.hair)
  return _internal_hair();
}
inline void SCharacterData::_internal_set_hair(uint32_t value) {
  
  _impl_.hair_ = value;
}
inline void SCharacterData::set_hair(uint32_t value) {
  _internal_set_hair(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.hair)
}

// uint32 eye = 8;
inline void SCharacterData::clear_eye() {
  _impl_.eye_ = 0u;
}
inline uint32_t SCharacterData::_internal_eye() const {
  return _impl_.eye_;
}
inline uint32_t SCharacterData::eye() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.eye)
  return _internal_eye();
}
inline void SCharacterData::_internal_set_eye(uint32_t value) {
  
  _impl_.eye_ = value;
}
inline void SCharacterData::set_eye(uint32_t value) {
  _internal_set_eye(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.eye)
}

// uint32 eyebrow = 9;
inline void SCharacterData::clear_eyebrow() {
  _impl_.eyebrow_ = 0u;
}
inline uint32_t SCharacterData::_internal_eyebrow() const {
  return _impl_.eyebrow_;
}
inline uint32_t SCharacterData::eyebrow() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.eyebrow)
  return _internal_eyebrow();
}
inline void SCharacterData::_internal_set_eyebrow(uint32_t value) {
  
  _impl_.eyebrow_ = value;
}
inline void SCharacterData::set_eyebrow(uint32_t value) {
  _internal_set_eyebrow(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.eyebrow)
}

// -------------------------------------------------------------------

// C2S_EnterServer

// int32 error = 1;
inline void C2S_EnterServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t C2S_EnterServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t C2S_EnterServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EnterServer.error)
  return _internal_error();
}
inline void C2S_EnterServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void C2S_EnterServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_EnterServer.error)
}

// -------------------------------------------------------------------

// S2C_EnterServer

// int32 error = 1;
inline void S2C_EnterServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EnterServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EnterServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterServer.error)
  return _internal_error();
}
inline void S2C_EnterServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EnterServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterServer.error)
}

// -------------------------------------------------------------------

// C2S_LeaveServer

// int32 error = 1;
inline void C2S_LeaveServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t C2S_LeaveServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t C2S_LeaveServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LeaveServer.error)
  return _internal_error();
}
inline void C2S_LeaveServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void C2S_LeaveServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LeaveServer.error)
}

// -------------------------------------------------------------------

// S2C_LeaveServer

// int32 error = 1;
inline void S2C_LeaveServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LeaveServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LeaveServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveServer.error)
  return _internal_error();
}
inline void S2C_LeaveServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LeaveServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveServer.error)
}

// -------------------------------------------------------------------

// C2S_Singin

// string id = 1;
inline void C2S_Singin::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C2S_Singin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.id)
}
inline std::string* C2S_Singin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.id)
  return _s;
}
inline const std::string& C2S_Singin::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C2S_Singin::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.id)
  return _impl_.id_.Release();
}
inline void C2S_Singin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.id)
}

// string password = 2;
inline void C2S_Singin::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C2S_Singin::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.password)
}
inline std::string* C2S_Singin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.password)
  return _s;
}
inline const std::string& C2S_Singin::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C2S_Singin::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.password)
  return _impl_.password_.Release();
}
inline void C2S_Singin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.password)
}

// -------------------------------------------------------------------

// S2C_Singin

// int32 error = 1;
inline void S2C_Singin::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singin::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singin::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.error)
  return _internal_error();
}
inline void S2C_Singin::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singin::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.error)
}

// string ticket = 2;
inline void S2C_Singin::clear_ticket() {
  _impl_.ticket_.ClearToEmpty();
}
inline const std::string& S2C_Singin::ticket() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_Singin::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ticket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.ticket)
}
inline std::string* S2C_Singin::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Singin.ticket)
  return _s;
}
inline const std::string& S2C_Singin::_internal_ticket() const {
  return _impl_.ticket_.Get();
}
inline void S2C_Singin::_internal_set_ticket(const std::string& value) {
  
  _impl_.ticket_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_Singin::_internal_mutable_ticket() {
  
  return _impl_.ticket_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_Singin::release_ticket() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Singin.ticket)
  return _impl_.ticket_.Release();
}
inline void S2C_Singin::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  _impl_.ticket_.SetAllocated(ticket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ticket_.IsDefault()) {
    _impl_.ticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Singin.ticket)
}

// -------------------------------------------------------------------

// C2S_Singup

// string id = 1;
inline void C2S_Singup::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C2S_Singup::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.id)
}
inline std::string* C2S_Singup::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.id)
  return _s;
}
inline const std::string& C2S_Singup::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C2S_Singup::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.id)
  return _impl_.id_.Release();
}
inline void C2S_Singup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.id)
}

// string password = 2;
inline void C2S_Singup::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C2S_Singup::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.password)
}
inline std::string* C2S_Singup::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.password)
  return _s;
}
inline const std::string& C2S_Singup::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C2S_Singup::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.password)
  return _impl_.password_.Release();
}
inline void C2S_Singup::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.password)
}

// string email = 3;
inline void C2S_Singup::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& C2S_Singup::email() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.email)
}
inline std::string* C2S_Singup::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.email)
  return _s;
}
inline const std::string& C2S_Singup::_internal_email() const {
  return _impl_.email_.Get();
}
inline void C2S_Singup::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.email)
  return _impl_.email_.Release();
}
inline void C2S_Singup::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.email)
}

// -------------------------------------------------------------------

// S2C_Singup

// int32 error = 1;
inline void S2C_Singup::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singup::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singup::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singup.error)
  return _internal_error();
}
inline void S2C_Singup::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singup::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singup.error)
}

// -------------------------------------------------------------------

// C2S_EmailVerified

// string verified = 1;
inline void C2S_EmailVerified::clear_verified() {
  _impl_.verified_.ClearToEmpty();
}
inline const std::string& C2S_EmailVerified::verified() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EmailVerified.verified)
  return _internal_verified();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_EmailVerified::set_verified(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verified_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_EmailVerified.verified)
}
inline std::string* C2S_EmailVerified::mutable_verified() {
  std::string* _s = _internal_mutable_verified();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_EmailVerified.verified)
  return _s;
}
inline const std::string& C2S_EmailVerified::_internal_verified() const {
  return _impl_.verified_.Get();
}
inline void C2S_EmailVerified::_internal_set_verified(const std::string& value) {
  
  _impl_.verified_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::_internal_mutable_verified() {
  
  return _impl_.verified_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::release_verified() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_EmailVerified.verified)
  return _impl_.verified_.Release();
}
inline void C2S_EmailVerified::set_allocated_verified(std::string* verified) {
  if (verified != nullptr) {
    
  } else {
    
  }
  _impl_.verified_.SetAllocated(verified, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verified_.IsDefault()) {
    _impl_.verified_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_EmailVerified.verified)
}

// -------------------------------------------------------------------

// S2C_EmailVerified

// int32 error = 1;
inline void S2C_EmailVerified::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EmailVerified::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EmailVerified::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EmailVerified.error)
  return _internal_error();
}
inline void S2C_EmailVerified::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EmailVerified::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EmailVerified.error)
}

// -------------------------------------------------------------------

// C2S_LoadServer

// -------------------------------------------------------------------

// S2C_LoadServer

// repeated int32 port = 1;
inline int S2C_LoadServer::_internal_port_size() const {
  return _impl_.port_.size();
}
inline int S2C_LoadServer::port_size() const {
  return _internal_port_size();
}
inline void S2C_LoadServer::clear_port() {
  _impl_.port_.Clear();
}
inline int32_t S2C_LoadServer::_internal_port(int index) const {
  return _impl_.port_.Get(index);
}
inline int32_t S2C_LoadServer::port(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.port)
  return _internal_port(index);
}
inline void S2C_LoadServer::set_port(int index, int32_t value) {
  _impl_.port_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.port)
}
inline void S2C_LoadServer::_internal_add_port(int32_t value) {
  _impl_.port_.Add(value);
}
inline void S2C_LoadServer::add_port(int32_t value) {
  _internal_add_port(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.port)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::_internal_port() const {
  return _impl_.port_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::port() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.port)
  return _internal_port();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::_internal_mutable_port() {
  return &_impl_.port_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.port)
  return _internal_mutable_port();
}

// repeated string ip = 2;
inline int S2C_LoadServer::_internal_ip_size() const {
  return _impl_.ip_.size();
}
inline int S2C_LoadServer::ip_size() const {
  return _internal_ip_size();
}
inline void S2C_LoadServer::clear_ip() {
  _impl_.ip_.Clear();
}
inline std::string* S2C_LoadServer::add_ip() {
  std::string* _s = _internal_add_ip();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S2C_LoadServer.ip)
  return _s;
}
inline const std::string& S2C_LoadServer::_internal_ip(int index) const {
  return _impl_.ip_.Get(index);
}
inline const std::string& S2C_LoadServer::ip(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.ip)
  return _internal_ip(index);
}
inline std::string* S2C_LoadServer::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadServer.ip)
  return _impl_.ip_.Mutable(index);
}
inline void S2C_LoadServer::set_ip(int index, const std::string& value) {
  _impl_.ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::set_ip(int index, std::string&& value) {
  _impl_.ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::set_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::set_ip(int index, const char* value, size_t size) {
  _impl_.ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2C_LoadServer.ip)
}
inline std::string* S2C_LoadServer::_internal_add_ip() {
  return _impl_.ip_.Add();
}
inline void S2C_LoadServer::add_ip(const std::string& value) {
  _impl_.ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::add_ip(std::string&& value) {
  _impl_.ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::add_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::add_ip(const char* value, size_t size) {
  _impl_.ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S2C_LoadServer.ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S2C_LoadServer::ip() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.ip)
  return _impl_.ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S2C_LoadServer::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.ip)
  return &_impl_.ip_;
}

// -------------------------------------------------------------------

// C2S_LoadCharacters

// -------------------------------------------------------------------

// S2C_LoadCharacters

// repeated .Protocol.SCharacterData character = 1;
inline int S2C_LoadCharacters::_internal_character_size() const {
  return _impl_.character_.size();
}
inline int S2C_LoadCharacters::character_size() const {
  return _internal_character_size();
}
inline void S2C_LoadCharacters::clear_character() {
  _impl_.character_.Clear();
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::mutable_character(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadCharacters.character)
  return _impl_.character_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >*
S2C_LoadCharacters::mutable_character() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadCharacters.character)
  return &_impl_.character_;
}
inline const ::Protocol::SCharacterData& S2C_LoadCharacters::_internal_character(int index) const {
  return _impl_.character_.Get(index);
}
inline const ::Protocol::SCharacterData& S2C_LoadCharacters::character(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadCharacters.character)
  return _internal_character(index);
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::_internal_add_character() {
  return _impl_.character_.Add();
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::add_character() {
  ::Protocol::SCharacterData* _add = _internal_add_character();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadCharacters.character)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >&
S2C_LoadCharacters::character() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadCharacters.character)
  return _impl_.character_;
}

// -------------------------------------------------------------------

// C2S_SelectServer

// int32 server_num = 1;
inline void C2S_SelectServer::clear_server_num() {
  _impl_.server_num_ = 0;
}
inline int32_t C2S_SelectServer::_internal_server_num() const {
  return _impl_.server_num_;
}
inline int32_t C2S_SelectServer::server_num() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SelectServer.server_num)
  return _internal_server_num();
}
inline void C2S_SelectServer::_internal_set_server_num(int32_t value) {
  
  _impl_.server_num_ = value;
}
inline void C2S_SelectServer::set_server_num(int32_t value) {
  _internal_set_server_num(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SelectServer.server_num)
}

// -------------------------------------------------------------------

// S2C_SelectServer

// int32 error = 1;
inline void S2C_SelectServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_SelectServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_SelectServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SelectServer.error)
  return _internal_error();
}
inline void S2C_SelectServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_SelectServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SelectServer.error)
}

// -------------------------------------------------------------------

// C2S_CreateCharacter

// .Protocol.SCharacterData character = 1;
inline bool C2S_CreateCharacter::_internal_has_character() const {
  return this != internal_default_instance() && _impl_.character_ != nullptr;
}
inline bool C2S_CreateCharacter::has_character() const {
  return _internal_has_character();
}
inline void C2S_CreateCharacter::clear_character() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_ != nullptr) {
    delete _impl_.character_;
  }
  _impl_.character_ = nullptr;
}
inline const ::Protocol::SCharacterData& C2S_CreateCharacter::_internal_character() const {
  const ::Protocol::SCharacterData* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& C2S_CreateCharacter::character() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CreateCharacter.character)
  return _internal_character();
}
inline void C2S_CreateCharacter::unsafe_arena_set_allocated_character(
    ::Protocol::SCharacterData* character) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = character;
  if (character) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_CreateCharacter.character)
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::release_character() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_CreateCharacter.character)
  
  ::Protocol::SCharacterData* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::_internal_mutable_character() {
  
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_ = p;
  }
  return _impl_.character_;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::mutable_character() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_CreateCharacter.character)
  return _msg;
}
inline void C2S_CreateCharacter::set_allocated_character(::Protocol::SCharacterData* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_;
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character);
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_ = character;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_CreateCharacter.character)
}

// -------------------------------------------------------------------

// S2C_CreateCharacter

// int32 error = 1;
inline void S2C_CreateCharacter::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_CreateCharacter::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_CreateCharacter::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateCharacter.error)
  return _internal_error();
}
inline void S2C_CreateCharacter::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_CreateCharacter::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateCharacter.error)
}

// -------------------------------------------------------------------

// C2S_TravelServer

// -------------------------------------------------------------------

// S2C_TravelServer

// int32 error = 1;
inline void S2C_TravelServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_TravelServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_TravelServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.error)
  return _internal_error();
}
inline void S2C_TravelServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_TravelServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
