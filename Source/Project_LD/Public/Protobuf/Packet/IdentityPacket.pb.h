// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IdentityPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IdentityPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IdentityPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IdentityPacket_2eproto;
namespace Protocol {
class C2S_EmailVerified;
struct C2S_EmailVerifiedDefaultTypeInternal;
extern C2S_EmailVerifiedDefaultTypeInternal _C2S_EmailVerified_default_instance_;
class C2S_Singin;
struct C2S_SinginDefaultTypeInternal;
extern C2S_SinginDefaultTypeInternal _C2S_Singin_default_instance_;
class C2S_Singup;
struct C2S_SingupDefaultTypeInternal;
extern C2S_SingupDefaultTypeInternal _C2S_Singup_default_instance_;
class S2C_EmailVerified;
struct S2C_EmailVerifiedDefaultTypeInternal;
extern S2C_EmailVerifiedDefaultTypeInternal _S2C_EmailVerified_default_instance_;
class S2C_Singin;
struct S2C_SinginDefaultTypeInternal;
extern S2C_SinginDefaultTypeInternal _S2C_Singin_default_instance_;
class S2C_Singup;
struct S2C_SingupDefaultTypeInternal;
extern S2C_SingupDefaultTypeInternal _S2C_Singup_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_EmailVerified* Arena::CreateMaybeMessage<::Protocol::C2S_EmailVerified>(Arena*);
template<> ::Protocol::C2S_Singin* Arena::CreateMaybeMessage<::Protocol::C2S_Singin>(Arena*);
template<> ::Protocol::C2S_Singup* Arena::CreateMaybeMessage<::Protocol::C2S_Singup>(Arena*);
template<> ::Protocol::S2C_EmailVerified* Arena::CreateMaybeMessage<::Protocol::S2C_EmailVerified>(Arena*);
template<> ::Protocol::S2C_Singin* Arena::CreateMaybeMessage<::Protocol::S2C_Singin>(Arena*);
template<> ::Protocol::S2C_Singup* Arena::CreateMaybeMessage<::Protocol::S2C_Singup>(Arena*);
template<> ::Protocol::UserData* Arena::CreateMaybeMessage<::Protocol::UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit PROTOBUF_CONSTEXPR UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserData& from) {
    UserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 5,
    kUpdateDateFieldNumber = 7,
    kCreateDateFieldNumber = 8,
    kActivateFieldNumber = 3,
    kConfirmedFieldNumber = 4,
    kVerifiedFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string update_date = 7;
  void clear_update_date();
  const std::string& update_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_date();
  PROTOBUF_NODISCARD std::string* release_update_date();
  void set_allocated_update_date(std::string* update_date);
  private:
  const std::string& _internal_update_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_date(const std::string& value);
  std::string* _internal_mutable_update_date();
  public:

  // string create_date = 8;
  void clear_create_date();
  const std::string& create_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_date();
  PROTOBUF_NODISCARD std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);
  private:
  const std::string& _internal_create_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_date(const std::string& value);
  std::string* _internal_mutable_create_date();
  public:

  // bool activate = 3;
  void clear_activate();
  bool activate() const;
  void set_activate(bool value);
  private:
  bool _internal_activate() const;
  void _internal_set_activate(bool value);
  public:

  // bool confirmed = 4;
  void clear_confirmed();
  bool confirmed() const;
  void set_confirmed(bool value);
  private:
  bool _internal_confirmed() const;
  void _internal_set_confirmed(bool value);
  public:

  // bool verified = 6;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
    bool activate_;
    bool confirmed_;
    bool verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singin) */ {
 public:
  inline C2S_Singin() : C2S_Singin(nullptr) {}
  ~C2S_Singin() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singin(const C2S_Singin& from);
  C2S_Singin(C2S_Singin&& from) noexcept
    : C2S_Singin() {
    *this = ::std::move(from);
  }

  inline C2S_Singin& operator=(const C2S_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singin& operator=(C2S_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singin* internal_default_instance() {
    return reinterpret_cast<const C2S_Singin*>(
               &_C2S_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2S_Singin& a, C2S_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singin& from) {
    C2S_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singin";
  }
  protected:
  explicit C2S_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singin) */ {
 public:
  inline S2C_Singin() : S2C_Singin(nullptr) {}
  ~S2C_Singin() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singin(const S2C_Singin& from);
  S2C_Singin(S2C_Singin&& from) noexcept
    : S2C_Singin() {
    *this = ::std::move(from);
  }

  inline S2C_Singin& operator=(const S2C_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singin& operator=(S2C_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singin* internal_default_instance() {
    return reinterpret_cast<const S2C_Singin*>(
               &_S2C_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S2C_Singin& a, S2C_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singin& from) {
    S2C_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singin";
  }
  protected:
  explicit S2C_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdTokenFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string id_token = 2;
  void clear_id_token();
  const std::string& id_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id_token();
  PROTOBUF_NODISCARD std::string* release_id_token();
  void set_allocated_id_token(std::string* id_token);
  private:
  const std::string& _internal_id_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id_token(const std::string& value);
  std::string* _internal_mutable_id_token();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_token_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singup) */ {
 public:
  inline C2S_Singup() : C2S_Singup(nullptr) {}
  ~C2S_Singup() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singup(const C2S_Singup& from);
  C2S_Singup(C2S_Singup&& from) noexcept
    : C2S_Singup() {
    *this = ::std::move(from);
  }

  inline C2S_Singup& operator=(const C2S_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singup& operator=(C2S_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singup* internal_default_instance() {
    return reinterpret_cast<const C2S_Singup*>(
               &_C2S_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_Singup& a, C2S_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singup& from) {
    C2S_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singup";
  }
  protected:
  explicit C2S_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singup) */ {
 public:
  inline S2C_Singup() : S2C_Singup(nullptr) {}
  ~S2C_Singup() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singup(const S2C_Singup& from);
  S2C_Singup(S2C_Singup&& from) noexcept
    : S2C_Singup() {
    *this = ::std::move(from);
  }

  inline S2C_Singup& operator=(const S2C_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singup& operator=(S2C_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singup* internal_default_instance() {
    return reinterpret_cast<const S2C_Singup*>(
               &_S2C_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_Singup& a, S2C_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singup& from) {
    S2C_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singup";
  }
  protected:
  explicit S2C_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EmailVerified) */ {
 public:
  inline C2S_EmailVerified() : C2S_EmailVerified(nullptr) {}
  ~C2S_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EmailVerified(const C2S_EmailVerified& from);
  C2S_EmailVerified(C2S_EmailVerified&& from) noexcept
    : C2S_EmailVerified() {
    *this = ::std::move(from);
  }

  inline C2S_EmailVerified& operator=(const C2S_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EmailVerified& operator=(C2S_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const C2S_EmailVerified*>(
               &_C2S_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C2S_EmailVerified& a, C2S_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EmailVerified& from) {
    C2S_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EmailVerified";
  }
  protected:
  explicit C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifiedFieldNumber = 1,
  };
  // string verified = 1;
  void clear_verified();
  const std::string& verified() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verified(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verified();
  PROTOBUF_NODISCARD std::string* release_verified();
  void set_allocated_verified(std::string* verified);
  private:
  const std::string& _internal_verified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verified(const std::string& value);
  std::string* _internal_mutable_verified();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EmailVerified) */ {
 public:
  inline S2C_EmailVerified() : S2C_EmailVerified(nullptr) {}
  ~S2C_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EmailVerified(const S2C_EmailVerified& from);
  S2C_EmailVerified(S2C_EmailVerified&& from) noexcept
    : S2C_EmailVerified() {
    *this = ::std::move(from);
  }

  inline S2C_EmailVerified& operator=(const S2C_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EmailVerified& operator=(S2C_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const S2C_EmailVerified*>(
               &_S2C_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_EmailVerified& a, S2C_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EmailVerified& from) {
    S2C_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EmailVerified";
  }
  protected:
  explicit S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserData

// string id = 1;
inline void UserData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.id)
}
inline std::string* UserData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.id)
  return _s;
}
inline const std::string& UserData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UserData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.id)
  return _impl_.id_.Release();
}
inline void UserData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.id)
}

// string password = 2;
inline void UserData::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserData::password() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.password)
}
inline std::string* UserData::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.password)
  return _s;
}
inline const std::string& UserData::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserData::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.password)
  return _impl_.password_.Release();
}
inline void UserData::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.password)
}

// bool activate = 3;
inline void UserData::clear_activate() {
  _impl_.activate_ = false;
}
inline bool UserData::_internal_activate() const {
  return _impl_.activate_;
}
inline bool UserData::activate() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.activate)
  return _internal_activate();
}
inline void UserData::_internal_set_activate(bool value) {
  
  _impl_.activate_ = value;
}
inline void UserData::set_activate(bool value) {
  _internal_set_activate(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.activate)
}

// bool confirmed = 4;
inline void UserData::clear_confirmed() {
  _impl_.confirmed_ = false;
}
inline bool UserData::_internal_confirmed() const {
  return _impl_.confirmed_;
}
inline bool UserData::confirmed() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.confirmed)
  return _internal_confirmed();
}
inline void UserData::_internal_set_confirmed(bool value) {
  
  _impl_.confirmed_ = value;
}
inline void UserData::set_confirmed(bool value) {
  _internal_set_confirmed(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.confirmed)
}

// string email = 5;
inline void UserData::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserData::email() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.email)
}
inline std::string* UserData::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.email)
  return _s;
}
inline const std::string& UserData::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserData::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.email)
  return _impl_.email_.Release();
}
inline void UserData::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.email)
}

// bool verified = 6;
inline void UserData::clear_verified() {
  _impl_.verified_ = false;
}
inline bool UserData::_internal_verified() const {
  return _impl_.verified_;
}
inline bool UserData::verified() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.verified)
  return _internal_verified();
}
inline void UserData::_internal_set_verified(bool value) {
  
  _impl_.verified_ = value;
}
inline void UserData::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.verified)
}

// string update_date = 7;
inline void UserData::clear_update_date() {
  _impl_.update_date_.ClearToEmpty();
}
inline const std::string& UserData::update_date() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.update_date)
  return _internal_update_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_update_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.update_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.update_date)
}
inline std::string* UserData::mutable_update_date() {
  std::string* _s = _internal_mutable_update_date();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.update_date)
  return _s;
}
inline const std::string& UserData::_internal_update_date() const {
  return _impl_.update_date_.Get();
}
inline void UserData::_internal_set_update_date(const std::string& value) {
  
  _impl_.update_date_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_update_date() {
  
  return _impl_.update_date_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_update_date() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.update_date)
  return _impl_.update_date_.Release();
}
inline void UserData::set_allocated_update_date(std::string* update_date) {
  if (update_date != nullptr) {
    
  } else {
    
  }
  _impl_.update_date_.SetAllocated(update_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_date_.IsDefault()) {
    _impl_.update_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.update_date)
}

// string create_date = 8;
inline void UserData::clear_create_date() {
  _impl_.create_date_.ClearToEmpty();
}
inline const std::string& UserData::create_date() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.create_date)
  return _internal_create_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_create_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.create_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.create_date)
}
inline std::string* UserData::mutable_create_date() {
  std::string* _s = _internal_mutable_create_date();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.create_date)
  return _s;
}
inline const std::string& UserData::_internal_create_date() const {
  return _impl_.create_date_.Get();
}
inline void UserData::_internal_set_create_date(const std::string& value) {
  
  _impl_.create_date_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_create_date() {
  
  return _impl_.create_date_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_create_date() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.create_date)
  return _impl_.create_date_.Release();
}
inline void UserData::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  _impl_.create_date_.SetAllocated(create_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.create_date_.IsDefault()) {
    _impl_.create_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.create_date)
}

// -------------------------------------------------------------------

// C2S_Singin

// string id = 1;
inline void C2S_Singin::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C2S_Singin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.id)
}
inline std::string* C2S_Singin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.id)
  return _s;
}
inline const std::string& C2S_Singin::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C2S_Singin::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.id)
  return _impl_.id_.Release();
}
inline void C2S_Singin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.id)
}

// string password = 2;
inline void C2S_Singin::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C2S_Singin::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.password)
}
inline std::string* C2S_Singin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.password)
  return _s;
}
inline const std::string& C2S_Singin::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C2S_Singin::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.password)
  return _impl_.password_.Release();
}
inline void C2S_Singin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.password)
}

// -------------------------------------------------------------------

// S2C_Singin

// int32 error = 1;
inline void S2C_Singin::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singin::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singin::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.error)
  return _internal_error();
}
inline void S2C_Singin::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singin::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.error)
}

// string id_token = 2;
inline void S2C_Singin::clear_id_token() {
  _impl_.id_token_.ClearToEmpty();
}
inline const std::string& S2C_Singin::id_token() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.id_token)
  return _internal_id_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_Singin::set_id_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.id_token)
}
inline std::string* S2C_Singin::mutable_id_token() {
  std::string* _s = _internal_mutable_id_token();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Singin.id_token)
  return _s;
}
inline const std::string& S2C_Singin::_internal_id_token() const {
  return _impl_.id_token_.Get();
}
inline void S2C_Singin::_internal_set_id_token(const std::string& value) {
  
  _impl_.id_token_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_Singin::_internal_mutable_id_token() {
  
  return _impl_.id_token_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_Singin::release_id_token() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Singin.id_token)
  return _impl_.id_token_.Release();
}
inline void S2C_Singin::set_allocated_id_token(std::string* id_token) {
  if (id_token != nullptr) {
    
  } else {
    
  }
  _impl_.id_token_.SetAllocated(id_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_token_.IsDefault()) {
    _impl_.id_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Singin.id_token)
}

// -------------------------------------------------------------------

// C2S_Singup

// string id = 1;
inline void C2S_Singup::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C2S_Singup::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.id)
}
inline std::string* C2S_Singup::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.id)
  return _s;
}
inline const std::string& C2S_Singup::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C2S_Singup::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.id)
  return _impl_.id_.Release();
}
inline void C2S_Singup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.id)
}

// string password = 2;
inline void C2S_Singup::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C2S_Singup::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.password)
}
inline std::string* C2S_Singup::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.password)
  return _s;
}
inline const std::string& C2S_Singup::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C2S_Singup::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.password)
  return _impl_.password_.Release();
}
inline void C2S_Singup::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.password)
}

// string email = 3;
inline void C2S_Singup::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& C2S_Singup::email() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.email)
}
inline std::string* C2S_Singup::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.email)
  return _s;
}
inline const std::string& C2S_Singup::_internal_email() const {
  return _impl_.email_.Get();
}
inline void C2S_Singup::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.email)
  return _impl_.email_.Release();
}
inline void C2S_Singup::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.email)
}

// -------------------------------------------------------------------

// S2C_Singup

// int32 error = 1;
inline void S2C_Singup::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singup::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singup::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singup.error)
  return _internal_error();
}
inline void S2C_Singup::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singup::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singup.error)
}

// -------------------------------------------------------------------

// C2S_EmailVerified

// string verified = 1;
inline void C2S_EmailVerified::clear_verified() {
  _impl_.verified_.ClearToEmpty();
}
inline const std::string& C2S_EmailVerified::verified() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EmailVerified.verified)
  return _internal_verified();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_EmailVerified::set_verified(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verified_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_EmailVerified.verified)
}
inline std::string* C2S_EmailVerified::mutable_verified() {
  std::string* _s = _internal_mutable_verified();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_EmailVerified.verified)
  return _s;
}
inline const std::string& C2S_EmailVerified::_internal_verified() const {
  return _impl_.verified_.Get();
}
inline void C2S_EmailVerified::_internal_set_verified(const std::string& value) {
  
  _impl_.verified_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::_internal_mutable_verified() {
  
  return _impl_.verified_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::release_verified() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_EmailVerified.verified)
  return _impl_.verified_.Release();
}
inline void C2S_EmailVerified::set_allocated_verified(std::string* verified) {
  if (verified != nullptr) {
    
  } else {
    
  }
  _impl_.verified_.SetAllocated(verified, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verified_.IsDefault()) {
    _impl_.verified_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_EmailVerified.verified)
}

// -------------------------------------------------------------------

// S2C_EmailVerified

// int32 error = 1;
inline void S2C_EmailVerified::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EmailVerified::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EmailVerified::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EmailVerified.error)
  return _internal_error();
}
inline void S2C_EmailVerified::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EmailVerified::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EmailVerified.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
